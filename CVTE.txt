开始自我介绍：
一般根据项目提问
1.面向对象多态的实现
	1.c++的多态性就是通过晚绑定技术来实现的。
	2.在基类的函数前加上virtual关键字，在派生类中重写该函数，运行时将会根据对象的实际类型来调用相应的函数，如果对象类型是派生类，就调用派生类的函数，如果对象类型是基类，就调用基类的函数。
--------------------------------------------------------------------
2.c++设计模式
（01）――工厂模式:https://blog.csdn.net/wuzhekai1985/article/details/6660462
	1.简单工厂:
		1)主要特点:需要在工厂类中做判断，从而创造相应的产品。当增加新的产品时，就需要修改工厂类。
	2.工厂方法:
		1)定义一个用于创建对象的接口，让子类决定实例化哪一个类。Factory Method使一个类的实例化延迟到其子类。
	2.抽象工厂:
		1)提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。
（02）――策略模式:https://blog.csdn.net/wuzhekai1985/article/details/6665197
	1.定义一系列的算法，把它们一个个封装起来，并且使它们可相互替换。
	2.本模式使得算法可独立于使用它的客户而变化。也就是说这些算法所完成的功能一样，对外的接口一样，只是各自实现上存在差异。
	3.用策略模式来封装算法，效果比较好。
（03）――适配器模式:https://blog.csdn.net/wuzhekai1985/article/details/6665542
	1.
（04）――单例模式:https://blog.csdn.net/wuzhekai1985/article/details/6665869
（05）――原型模式、模板方法模式（06）――建造者模式（07）――外观模式、组合模式（08）――代理模式（09）――享元模式（10）――桥接模式（11）――装饰模式（12）――备忘录模式（13）――中介者模式（14）――职责链模式（15）――观察者模式（16）――状态模式
--------------------------------------------------------------------
3.线程进程：https://www.cnblogs.com/Yogurshine/p/3640206.html
1.进程:
	进程是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。
	进程是一个具有独立功能的程序关于某个数据集合的一次运行活动。它可以申请和拥有系统资源，是一个动态的概念，是一个活动的实体。	
2.线程:
	轻量进程
	线程是进程中的一个实体，是被系统独立调度和分派的基本单位，线程自己不拥有系统资源，只拥有一点儿在运行中必不可少的资源，但它可与同属一个进程的其它线程共享进程所拥有的全部资源。
3多线程:https://www.cnblogs.com/qtiger/p/5812483.html

	在单个程序中同时运行多个线程完成不同的工作，称为多线程。
	为了解决负载均衡问题,充分利用CPU资源.为了提高CPU的使用率,采用多线程的方式去同时完成几件事情而不互相干扰.为了处理大量的IO操作时或处理的情况需要花费大量的时间等等,比如:读写文件,视频图像的采集,处理,显示,保存等。
	优点：
		1.多线程技术使程序的响应速度更快 ,因为用户界面可以在进行其它工作的同时一直处于活动状态;
		2.当前没有进行处理的任务时可以将处理器时间让给其它任务;
		3.占用大量处理时间的任务可以定期将处理器时间让给其它任务;
		4.可以随时停止任务;
		5.可以分别设置各个任务的优先级以优化性；
		6.程序的运行效率可能会提高
	缺点：
		1.如果有大量的线程,会影响性能,因为操作系统需要在它们之间切换.
		2.更多的线程需要更多的内存空间
		3.线程中止需要考虑对程序运行的影响.
		4.通常块模型数据是在多个线程间共享的,需要防止线程死锁情况的发生

--------------------------------------------------------------------
4.内存管理，
堆和栈的区别：
	1.栈是由编译器在需要时分配的，不需要时自动清除的变量存储区。里面的变量通常是局部变量、函数参数等。堆是由malloc()函数（C++语言为 new 运算符）分配的内存块，内存释放由程序员手动控制，在 C 语言为 free 函数完成（C++中为 delete）。
	2.申请大小:
        	栈:在Windows下,栈是向低地址扩展的数据结构,是一块连续的内存区域.即栈顶的地址和栈的最大容量是系统预先规好的。栈的大小是1M,如果申请空间超过栈的剩余空间时,将提示overflow.因此,能从栈获得的空间较小。
		堆:堆是向高地址扩展的数据结构,是不连续的内存区域.这是因为系统是用链表来存储空闲内存地址的,自然是不连续的,而链表的遍历方向是由低地址向高地址.堆得大小受限于计算机系统中有效地虚拟内存.由此可见,堆获得的空间比较灵活,也比较大。
	3.栈是机器系统提供的数据结构,计算机会在底层对栈提供支持:分配专门的寄存器存放栈的地址,压栈出栈都有专门的指令执行,这就决定了栈的效率比较高。     
	4.堆则是C/C++函数库提供的,它的机制是很复杂的。
--------------------------------------------------------------------
5.进程线程的通信
进程的通信:
	1.进程间通信主要包括管道, 系统IPC（包括消息队列,信号,共享存储), 套接字(SOCKET).
		管道:
			1)普通管道PIPE, 通常有两种限制,一是单工,只能单向传输;二是只能在父子或者兄弟进程间使用.
			2)流管道s_pipe: 去除了第一种限制,为半双工，可以双向传输.
			3)命名管道:name_pipe, 去除了第二种限制,可以在许多并不相关的进程之间进行通讯.
		信号:
			（Signals ）是Unix系统中使用的最古老的进程间通信的方法之一。操作系统通过信号来通知进程系统中发生了某种预先规定好的事件（一组事件中的一个），它也是用户进程之间通信和同步的一种原始机制。
		系统V IPC:
			1)共享内存
			2)消息队列:
				消息队列就是消息的一个链表，它允许一个或多个进程向它写消息，一个或多个进程从中读消息。Linux维护了一个消息队列向量表：msgque，来表示系统中所有的消息队列。
			3)信号量
--------------------------------------------------------------------
6.ARM中断处理
--------------------------------------------------------------------
7.Linux有什么看法？
--------------------------------------------------------------------
8.字符串拷贝函数
--------------------------------------------------------------------
9.写个快速排序或者堆排序
--------------------------------------------------------------------
10.你认为嵌入式软件工程师应该做什么？流程？
--------------------------------------------------------------------
11.嵌入式系统的特点?
--------------------------------------------------------------------
12.五年内有什么规划？
--------------------------------------------------------------------
13.一些项目实现
--------------------------------------------------------------------
14.最后怎么解决项目遇到的问题。
--------------------------------------------------------------------


面试题目
1.自我介绍
--------------------------------------------------------------------
2.做过哪些项目
--------------------------------------------------------------------
3.详细介绍一个项目
--------------------------------------------------------------------
4.什么是引用
--------------------------------------------------------------------
5.指针和引用的区别
--------------------------------------------------------------------
6.详细解释TCP
--------------------------------------------------------------------
7.数组和指针的区别
--------------------------------------------------------------------
8.怎么在LINUX下运行一个执行文件
--------------------------------------------------------------------
9.有哪几种方法创建一个文件
--------------------------------------------------------------------
10.内核空间和用户空间的区别，内核空间多大
--------------------------------------------------------------------
11.用户权限，更改权限
--------------------------------------------------------------------
12.什么是多态
--------------------------------------------------------------------
13.手写一道编程题（解析字符串）
--------------------------------------------------------------------
14.中断处理函数流程
--------------------------------------------------------------------
15.知不知道这个职位做什么
16.能否接受出差，是否接受海外出差
17.觉得自己有哪些方面没表现出来
18.有什么问题想问
